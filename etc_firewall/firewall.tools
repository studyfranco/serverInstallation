#! /bin/bash
IPT=/sbin/iptables
IPT6=/sbin/ip6tables
IPS=/sbin/ipset
ROUTE=/sbin/route
SED=/bin/sed
DUMPCO=/bin/ss
DOCKER=/bin/docker
IFCONFIG=/usr/sbin/ifconfig
JQ=/usr/bin/jq

insert_rules() # You can use it to remove rules too
{
	local cmd_args=$1 # -t nat -I ? -m ? -j ?
	local pid1
	local pid2
	$IPT $cmd_args & pid1=$!
	$IPT6 $cmd_args & pid2=$!
	wait $pid1 || echo "Bugged v4 $cmd_args"
	wait $pid2 || echo "Bugged v6 $cmd_args"
	return 0
}

insert_rules_quietly() # You can use it to remove rules too
{
	local cmd_args=$1 # -t nat -I ? -m ? -j ?
	local pid1
	local pid2
	$IPT $cmd_args 2> /dev/null & pid1=$!
	$IPT6 $cmd_args 2> /dev/null & pid2=$!
	wait $pid1
	wait $pid2
	return 0
}

insert_rules_with_test_ok_ipv4()
{
	local cmd_args=$1 # -t nat -I ? -m ? -j ?
	local cmd_args_back=$2
	local i=0
	$IPT $cmd_args > /dev/null 2>&1
	while [ $? -ne 0 ] && [ $i -le 5 ]; do
		((i++))
		sleep 1
		$IPT $cmd_args >/dev/null 2>&1
	done
	if [ $? -ne 0 ]; then
		$IPT $cmd_args
		echo "Bugged v4 $cmd_args"
		if [ ! -z "$cmd_args_back" ]; then
			$IPT $cmd_args_back
		fi
	fi
	return 0
}

insert_rules_with_test_ok_ipv6()
{
	local cmd_args=$1 # -t nat -I ? -m ? -j ?
	local cmd_args_back=$2
	local i=0
	$IPT6 $cmd_args > /dev/null 2>&1
	while [ $? -ne 0 ] && [ $i -le 5 ]; do
		((i++))
		sleep 1
		$IPT6 $cmd_args >/dev/null 2>&1
	done
	if [ $? -ne 0 ]; then
		$IPT6 $cmd_args
		echo "Bugged v6 $cmd_args"
		if [ ! -z "$cmd_args_back" ]; then
			$IPT6 $cmd_args_back
		fi
	fi
	return 0
}

insert_rules_with_test_ok()
{
	local cmd_args=$1 # -t nat -I ? -m ? -j ?
	local cmd_args_back=$2
	local pid1
	local pid2
	insert_rules_with_test_ok_ipv4 "$cmd_args" "$cmd_args_back" & pid1=$!
	insert_rules_with_test_ok_ipv6 "$cmd_args" "$cmd_args_back" & pid2=$!
	wait $pid1
	wait $pid2
	return 0
}

# Fonction pour vérifier si une chaîne de texte est une adresse IPv4 valide
is_ipv4_net() {
	local input="$1"
	# Utilisation d'une expression régulière pour la validation
	if [[ $input =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}/[0-9]+$ ]]; then
		return 0 # C'est une adresse IPv4 valide
	else
		return 1 # Ce n'est pas une adresse IPv4 valide
	fi
}

# Fonction pour vérifier si une chaîne de texte est une adresse IPv6 valide
is_ipv6_net() {
	local input="$1"
	# Utilisation d'une expression régulière pour la validation
	if [[ $input =~ ^[a-f0-9:]+/[0-9]+$ ]]; then
		return 0 # C'est une adresse IPv6 valide
	else
		return 1 # Ce n'est pas une adresse IPv6 valide
	fi
}

get_bridge_name_docker_network()
{
	local NETWORK="$1"
	local network_options=$(${DOCKER} network inspect -f '{{json .Options}}' "${NETWORK}")
	# Vérifier si "com.docker.network.bridge.name" est spécifié dans les options
	if [[ "$network_options" == *"com.docker.network.bridge.name"* ]]; then
		# Utiliser le nom de bridge spécifié dans les options
		local bridge_name=$(echo "$network_options" | ${JQ} -r '.["com.docker.network.bridge.name"]')
	else
		# Utiliser l'ID du réseau pour construire le nom du bridge
		local network_id=$(${DOCKER} network inspect -f '{{.Id}}' "${NETWORK}")
		local bridge_name="br-${network_id:0:12}"
	fi

	# Vérifier si le bridge existe réellement
	if ${IFCONFIG} | grep -q "$bridge_name"; then
		echo "${bridge_name}"
	else
		echo ""
	fi
}

max_length_chain=29  # Longueur maximale autorisée
generate_chain_name()
{
	local base_name="$1"  # Le nom de base de la chaîne
	if ((max_length_chain > ${#base_name})); then
		echo "${base_name}"
	else
		local hashname=$(echo -n "${base_name}" | md5sum | cut -d ' ' -f 1)
		echo "${base_name:0:$((max_length_chain - ${#base_name} -7))}${hashname:0:6}"
	fi
}

# insert_rules_list_ports "-t " "-AI" "-m ipv4" "-m ipv6" "-j" "tcp/udp" ARRAY
insert_rules_list_ports()
{
	local cmd_args_v4=""
	local cmd_args_v6=""
	local option_t=$1 #-t nat/
	shift
	cmd_args_v4+="$option_t"
	cmd_args_v6+="$option_t"
	local option_A_I=$1 #-A ?/-I ?
	shift
	cmd_args_v4+=" $option_A_I"
	cmd_args_v6+=" $option_A_I"
	local option_m_v4=$1 #-m set ! --match-set ${IPSLISTBADIP} src
	shift
	if [ ! -z "$option_m_v4" ]; then
		cmd_args_v4+=" $option_m_v4"
	fi
	local option_m_v6=$1 #-m set ! --match-set ${IPSLISTBADIP}6 src
	shift
	if [ ! -z "$cmd_args_v6" ]; then
		cmd_args_v6+=" $option_m_v6"
	fi
	local option_j=$1 #-j ACCEPT
	shift
	local proto=$1 #tcp/udp
	shift
	local ports=("$@")
	
	declare -a pids=()
	local PORT
	for PORT in "${ports[@]}"; do
		$IPT $cmd_args_v4 -p $proto --dport $PORT $option_j & pids+=($!)
		$IPT6 $cmd_args_v6 -p $proto --dport $PORT $option_j & pids+=($!)
	done
	wait "${pids[@]}"
	return 0
}

## insert_rules_list_docker_ports_to_host "container_name" "network" "-t " "-Aor-I" "I position" "-m ipv4" "-m ipv6" "-j" "tcp/udp" ARRAY
insert_rules_list_docker_ports_to_host()
{
	local container_name=$1
	shift
	local network=$1
	shift
	local network_interface=$(get_bridge_name_docker_network "${network}")
	if [ -n "${network_interface}" ]; then
		local cmd_args=""
		local option_t=$1 #-t nat/
		shift
		cmd_args+="$option_t"
		local option_A_I=$1 #-A ?/-I ?
		shift
		cmd_args+=" $option_A_I"
		local cmd_args_v4_end=""
		local cmd_args_v6_end=""
		local position_I=$1 #1/2/3/?/....
		shift
		if [ ! -z "${position_I}" ]; then
			cmd_args_v4_end+=" ${position_I}"
			cmd_args_v6_end+=" ${position_I}"
		fi
		local option_m_v4=$1 #-m set ! --match-set ${IPSLISTBADIP} src
		shift
		if [ ! -z "$option_m_v4" ]; then
			cmd_args_v4_end+=" $option_m_v4"
		fi
		local option_m_v6=$1 #-m set ! --match-set ${IPSLISTBADIP}6 src
		shift
		if [ ! -z "$cmd_args_v6" ]; then
			cmd_args_v6_end+=" $option_m_v6"
		fi
		local option_j=$1 #-j ACCEPT
		shift
		local proto=$1 #tcp/udp
		shift
		local ports=("$@")

		declare -a pids=()
		local PORT
		local json_NETWORK=$(${DOCKER} network inspect -f '{{json .IPAM.Config}}' "${network}")
		# Parcours de la liste des sous-réseaux dans la sortie JSON
		for subnet in $(echo "${json_NETWORK}" | ${JQ} -r '.[] | .Subnet'); do
			if is_ipv4_net "$subnet"; then
				local ipv4=$(${DOCKER} container inspect -f "{{ .NetworkSettings.Networks.${container_name}.IPAddress }}" ${container_name})
				local chaintouse=$(generate_chain_name "${CHAINMAININTER}-${network_interface}-${subnet}")
				for PORT in "${ports[@]}"; do
					$IPT ${cmd_args} ${chaintouse}${cmd_args_v4_end} -s ${ipv4} -p ${proto} --dport ${PORT} ${option_j} & pids+=($!)
				done
			elif is_ipv6_net "$subnet"; then
				local ipv6=$(${DOCKER} container inspect -f "{{ .NetworkSettings.Networks.${container_name}.GlobalIPv6Address }}" ${container_name})
				local chaintouse=$(generate_chain_name "${CHAINMAININTER}-${network_interface}-${subnet}")
				for PORT in "${ports[@]}"; do
					$IPT6 ${cmd_args} ${chaintouse}${cmd_args_v4_end} -s ${ipv6} -p ${proto} --dport ${PORT} ${option_j} & pids+=($!)
				done
			fi
		done
	fi
	wait "${pids[@]}"
	return 0
}
#! /bin/bash
### BEGIN INIT INFO
# Provides:          firewall
# Required-Start:    $all
# Required-Stop:     $local_fs $remote_fs
# Should-Stop:       $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start/stop firewall
# Description:       Start/stop firewall, a script to set/unset your custom fir
### END INIT INFO
 
IPT=/sbin/iptables
ROUTE=/sbin/route
SED=/bin/sed
mainInter="eth0"
declare -a IPAutor=()
mapfile -t IPBlock < /etc/init.d/firewall.block.ip
declare -a IPBlock
declare -a INTEROut=("eth0")
declare -a interfaceToGoOutSide=()
declare -a rulesZone=("INPUT" "DOCKER")
declare -a openPortTCP=("22")
declare -a openPortUDP=()
declare -a countryOpenPort="FR,DE"
declare -a WWopenPortTCP=()
declare -a WWopenPortUDP=()
declare -a blockedCountry="AE,BW,BY,BZ,CN,EG,HK,IL,JP,KR,KP,RU,SG,TN"
declare -a blockedCountry2="UA,US"
#declare -a portSentryTCP=()
read -a portSentryTCP <<< `grep -m 1 "^TCP_PORTS" /etc/portsentry/portsentry.conf | sed 's/TCP_PORTS=//' | sed 's/"//g' | tr ',' ' '`
#declare -a portSentryUDP=()
read -a portSentryUDP <<< `grep -m 1 "^UDP_PORTS" /etc/portsentry/portsentry.conf | sed 's/UDP_PORTS=//' | sed 's/"//g' | tr ',' ' '`
declare -a openPortDockerTCP=() # Permet l'ouverture du port des conteneur
declare -a openPortDockerTCPExt=() # Permet l'ouverture du port a l exterieur. -p 81:80 = 81 openPortDockerTCPExt et 80 openPortDockerTCP
declare -a interfaceToForwardToDocker=() # Permet de forward les cconnexion vers les container docker
#
# Function that set the firewall rules
#
set_rules()
{
	for IP in "${IPBlock[@]}"; do
		$ROUTE -n add $IP reject 2> /dev/null
	done

	# On réinitialise le firewall
	flush_rules

        # On autorise les ips du reseau local
        for zone in "${rulesZone[@]}"; do
                $IPT -A $zone -s 10.0.0.0/24 -j ACCEPT
                $IPT -A $zone -s 192.168.0.0/24 -j ACCEPT
        done
	# On autorise les connexions dont l état est RELATED ou ESTABLISHED
	# L'ouverture complete se fait ici a utiliser avec precautions
	for ITER in "${INTEROut[@]}"; do
		for zone in "${rulesZone[@]}"; do
			# On autorise les connexions dont l état est RELATED ou ESTABLISHED
			$IPT -A $zone -i $ITER -m state --state ESTABLISHED,RELATED -j ACCEPT
			# On autorise nos IP
			for IP in "${IPAutor[@]}"; do
				$IPT -A $zone -i $ITER -s $IP -j ACCEPT
			done
		done

		# Les IPs qui ont attaqué, sont bloqué à jamais
		for IP in "${IPBlock[@]}"; do
			$IPT -A INPUT -i $ITER -s $IP -j DROP
		done

		for PORT in "${WWopenPortTCP[@]}"; do
			$IPT -A INPUT -i $ITER -p tcp --dport $PORT -j ACCEPT
		done
		for PORT in "${WWopenPortUDP[@]}"; do
			$IPT -A INPUT -i $ITER -p udp --dport $PORT -j ACCEPT
		done

		# On ouvre les port pour portsentry et son ultimate ban
		for PORT in "${portSentryTCP[@]}"; do
			$IPT -A INPUT -i $ITER -p tcp --dport $PORT -j ACCEPT
		done
		for PORT in "${portSentryUDP[@]}"; do
			$IPT -A INPUT -i $ITER -p udp --dport $PORT -j ACCEPT
		done

		$IPT -A INPUT -i $ITER -m geoip --src-cc $blockedCountry -j DROP
		$IPT -A INPUT -i $ITER -m geoip --src-cc $blockedCountry2 -j DROP

		# Partie special docker avec ouverture global des ports
		for PORT in "${openPortDockerTCP[@]}"; do
			$IPT -A "DOCKER" -i $ITER -p tcp --dport $PORT -j ACCEPT
		done
		for PORT in "${openPortDockerTCPExt[@]}"; do
			$IPT -A "INPUT" -i $ITER -p tcp --dport $PORT -j ACCEPT
		done

		for PORT in "${openPortTCP[@]}"; do
			$IPT -A INPUT -i $ITER -p tcp --dport $PORT -m geoip --src-cc $countryOpenPort -j ACCEPT
                        $IPT -A INPUT -i $ITER -p tcp --dport $PORT -m geoip ! --src-cc $countryOpenPort -j DROP
		done
		for PORT in "${openPortUDP[@]}"; do
			$IPT -A INPUT -i $ITER -p udp --dport $PORT -m geoip --src-cc $countryOpenPort -j ACCEPT
                        $IPT -A INPUT -i $ITER -p udp --dport $PORT -m geoip ! --src-cc $countryOpenPort -j DROP
		done
	done

	# On accepte toute les requetes ICMP
	$IPT -A INPUT -p icmp -j ACCEPT
	# On ouvre les ports des docker
	for PORT in "${openPortDockerTCP[@]}"; do
		$IPT -A "DOCKER" -p tcp --dport $PORT -j ACCEPT
	done

	iptables -t nat -A POSTROUTING -o $mainInter -j MASQUERADE
	for INTER in "${interfaceToGoOutSide[@]}"; do
		for PORT in "${WWopenPortTCP[@]}"; do
			$IPT -A INPUT -i $ITER -p tcp --dport $PORT -j ACCEPT
		done
		for PORT in "${WWopenPortUDP[@]}"; do
			$IPT -A INPUT -i $ITER -p udp --dport $PORT -j ACCEPT
		done
		for PORT in "${openPortTCP[@]}"; do
			$IPT -A INPUT -i $INTER -p tcp --dport $PORT -j ACCEPT
		done
		for PORT in "${openPortUDP[@]}"; do
			$IPT -A INPUT -i $INTER -p udp --dport $PORT -j ACCEPT
		done
		for PORT in "${portSentryTCP[@]}"; do
			$IPT -A INPUT -i $INTER -p tcp --dport $PORT -j DROP
		done
		for PORT in "${portSentryUDP[@]}"; do
			$IPT -A INPUT -i $INTER -p udp --dport $PORT -j DROP
		done
		$IPT -A FORWARD -i $INTER -o $mainInter -j ACCEPT
		$IPT -A FORWARD -i $mainInter -o $INTER -m state --state ESTABLISHED,RELATED -j ACCEPT
	done

	for INTER in "${interfaceToForwardToDocker[@]}"; do
		$IPT -A FORWARD -i docker0 -o $INTER -j ACCEPT
		$IPT -A FORWARD -i $INTER -o docker0 -j ACCEPT
		for PORT in "${openPortDockerTCPExt[@]}"; do
			$IPT -A "INPUT" -i $INTER -p tcp --dport $PORT -j ACCEPT
		done
	done

	# On "drop" tout le reste du traffic
	#for ITER in "${INTEROut[@]}"; do
	#	$IPT -A INPUT -i $ITER -j DROP
	#done
	#$IPT -A INPUT -i virbr1 -j DROP

	# On remove les route deny. Ce qui evite des problèmes
	for IP in "${IPAutor[@]}"; do
		$ROUTE -n del $IP reject 2> /dev/null
		$SED -i "/^ALL: $IP : DENY$/d" "/etc/hosts.deny"
	done
	for IP in "${IPBlock[@]}"; do
		$ROUTE -n del $IP reject 2> /dev/null
		$SED -i "/^ALL: $IP : DENY$/d" "/etc/hosts.deny"
	done

return 0
}
 
#
# Function that set the firewall rules
#
flush_rules()
{
	$IPT -F INPUT
	$IPT -F DOCKER
	for INTER in "${interfaceToForwardToDocker[@]}"; do
		$IPT -D FORWARD -i docker0 -o $INTER -j ACCEPT
		$IPT -D FORWARD -i $INTER -o docker0 -j ACCEPT
		$IPT -D FORWARD -o $INTER -j REJECT --reject-with icmp-port-unreachable 2> /dev/null
		$IPT -D FORWARD -i $INTER -j REJECT --reject-with icmp-port-unreachable 2> /dev/null
	done
	#$IPT -F FORWARD
	$IPT -F OUTPUT
	return 0
}
 
command="$1"
case "$command" in
        start|force-start|restart|force-restart|reload|force-reload)
                set_rules
                ;;
        stop)
                flush_rules             
                ;;
 
        status)
                $IPT -L -v -n
                ;;
        *)
esac

#update-rc.d firewall defaults;

#! /bin/bash
### BEGIN INIT INFO
# Provides:          firewall
# Required-Start:    $all
# Required-Stop:     $local_fs $remote_fs
# Should-Stop:       $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start/stop firewall
# Description:       Start/stop firewall, a script to set/unset your custom fir
### END INIT INFO
 
IPT=/sbin/iptables
IPT6=/sbin/ip6tables
ROUTE=/sbin/route
SED=/bin/sed
mainInter="eth0"
declare -a IPAutor=()
CHAINIPBLOCK="z-block-ips"
CHAINIPALLOW="z-allow-ips"
CHAINOPENSATE="z-open-state"
CHAINPORTSENTRYOPEN="z-port-sentry-open"
CHAINPORTSENTRYCLOSE="z-port-sentry-close"
CHAINPORTSENTRYCLOSEALLOWIP="z-no-portsentry-allow-ips"
declare -a SPECIALCHAINLIST=($CHAINIPBLOCK $CHAINIPALLOW $CHAINOPENSATE $CHAINPORTSENTRYOPEN $CHAINPORTSENTRYCLOSE $CHAINPORTSENTRYCLOSEALLOWIP)
mapfile -t IPBlock < /etc/init.d/firewall.block.ip
declare -a IPBlock
declare -a INTEROut=("eth0")
declare -a interfaceToGoOutSide=()
declare -a rulesZone=("INPUT" "DOCKER")
# Comprends aussi les ports dockers exterieur
declare -a openPortTCP=("22")
declare -a openPortUDP=()
# Cela permet l'ouverture du port a l exterieur. -p 81:80 = 81 openPort et 80 openPortDockerTCP
declare -a countryOpenPort="FR,DE"
declare -a WWopenPortTCP=()
declare -a WWopenPortUDP=()
declare -a blockedCountry="AE,BW,BY,BZ,CN,EG,HK,IL,JP,KR,KP,RU,SG,TN"
declare -a blockedCountry2="UA,US"
#declare -a portSentryTCP=()
read -a portSentryTCP <<< `grep -m 1 "^TCP_PORTS" /etc/portsentry/portsentry.conf | sed 's/TCP_PORTS=//' | sed 's/"//g' | tr ',' ' '`
#declare -a portSentryUDP=()
read -a portSentryUDP <<< `grep -m 1 "^UDP_PORTS" /etc/portsentry/portsentry.conf | sed 's/UDP_PORTS=//' | sed 's/"//g' | tr ',' ' '`
declare -a openPortDockerTCP=() # Permet l'ouverture du port des conteneur
declare -a interfaceToForwardToDocker=() # Permet de forward les connexion vers les container docker
#
# Function that set the firewall rules
#
set_rules()
{
	# On réinitialise le firewall
	flush_rules


	for chain in "${SPECIALCHAINLIST[@]}"; do
		$IPT -N $chain
		$IPT6 -N $chain
	done

	# Creation d'un groupe pour les IPV4s Bloques
	for IP in "${IPBlock[@]}"; do
		$IPT -A $CHAINIPBLOCK -s $IP -j DROP &
	done
	# Ajout des IPV4s autorisé
	for IP in "${IPAutor[@]}"; do
		$IPT -A $CHAINIPALLOW -s $IP -j ACCEPT &
		$IPT -A $CHAINPORTSENTRYCLOSEALLOWIP -s $IP -j $CHAINPORTSENTRYCLOSE &
		#$IPT6 -A $CHAINPORTSENTRYCLOSEALLOWIP -s $IP -j $CHAINPORTSENTRYCLOSE
	done
	# Creation des etats possibles
	$IPT -A $CHAINOPENSATE -m state --state ESTABLISHED,RELATED -j ACCEPT &
	$IPT -A $CHAINOPENSATE -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT &
	$IPT6 -A $CHAINOPENSATE -m state --state ESTABLISHED,RELATED -j ACCEPT &
	$IPT6 -A $CHAINOPENSATE -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT &
	# On souhaite choisir quand ouvrir et fermer les ports de portsentry et son ultimate ban
	for PORT in "${portSentryTCP[@]}"; do
		$IPT -A $CHAINPORTSENTRYOPEN -p tcp --dport $PORT -j ACCEPT &
		$IPT6 -A $CHAINPORTSENTRYOPEN -p tcp --dport $PORT -j ACCEPT &
		$IPT -A $CHAINPORTSENTRYCLOSE -p tcp --dport $PORT -j DROP &
		$IPT6 -A $CHAINPORTSENTRYCLOSE -p tcp --dport $PORT -j DROP &
	done
	for PORT in "${portSentryUDP[@]}"; do
		$IPT -A $CHAINPORTSENTRYOPEN -p udp --dport $PORT -j ACCEPT &
		$IPT6 -A $CHAINPORTSENTRYOPEN -p udp --dport $PORT -j ACCEPT &
		$IPT -A $CHAINPORTSENTRYCLOSE -p udp --dport $PORT -j DROP &
		$IPT6 -A $CHAINPORTSENTRYCLOSE -p udp --dport $PORT -j DROP &
	done

	$IPT -A INPUT  -i lo -j ACCEPT
	$IPT6 -A INPUT  -i lo -j ACCEPT
	# On autorise les ips du reseau local mais il faut aussi ne pas les autoriser sur les ports de portsentry
	$IPT -A INPUT -s 10.0.0.0/24 -j $CHAINPORTSENTRYCLOSE
	$IPT -A INPUT -s 192.168.0.0/24 -j $CHAINPORTSENTRYCLOSE
	for zone in "${rulesZone[@]}"; do
		$IPT -A $zone -s 10.0.0.0/24 -j ACCEPT
		$IPT -A $zone -s 192.168.0.0/24 -j ACCEPT
	done

	# On autorise les connexions dont l état est RELATED ou ESTABLISHED
	# L'ouverture complete se fait ici a utiliser avec precautions
	echo "Réglages principaux des interfaces"
	for zone in "${rulesZone[@]}"; do
		# On autorise les connexions dont l état est RELATED ou ESTABLISHED
		$IPT -A $zone -j $CHAINOPENSATE
		$IPT6 -A $zone -j $CHAINOPENSATE 2> /dev/null
		for ITER in "${INTEROut[@]}"; do
			# On autorise nos IP mais il ne faut pas qu'elle puissent être ban par portsentry
			$IPT -A $zone -i $ITER -j $CHAINPORTSENTRYCLOSEALLOWIP
			$IPT6 -A $zone -i $ITER -j $CHAINPORTSENTRYCLOSEALLOWIP 2> /dev/null
			$IPT -A $zone -i $ITER -j $CHAINIPALLOW
			$IPT6 -A $zone -i $ITER -j $CHAINIPALLOW 2> /dev/null
			# Mais on bloque celles qu'on ne souhaite pas
			$IPT -A $zone -i $ITER -j $CHAINIPBLOCK
			$IPT6 -A $zone -i $ITER -j $CHAINIPBLOCK 2> /dev/null
		done
	done

	# Open plex ports https://s3-eu-west-1.amazonaws.com/plex-sidekiq-servers-list/sidekiqIPs.txt
	$IPT -A INPUT -p tcp --dport 34212 -s 54.170.120.91 -j ACCEPT
	$IPT -A INPUT -p tcp --dport 34212 -s 46.51.207.89 -j ACCEPT

	echo "Ouverture des ports et protocoles de l'interface out"
	for ITER in "${INTEROut[@]}"; do
		echo "Create the rules for the $ITER"
		$IPT -A OUTPUT -o $ITER -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
		$IPT -A OUTPUT -o $ITER -m conntrack --ctstate NEW,ESTABLISHED,RELATED -j ACCEPT
		$IPT6 -A OUTPUT -o $ITER -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
		$IPT6 -A OUTPUT -o $ITER -m conntrack --ctstate NEW,ESTABLISHED,RELATED -j ACCEPT

		$IPT -A INPUT -i $ITER -j $CHAINPORTSENTRYOPEN
		$IPT6 -A INPUT -i $ITER -j $CHAINPORTSENTRYOPEN
		for PORT in "${WWopenPortTCP[@]}"; do
			$IPT -A INPUT -i $ITER -p tcp --dport $PORT -j ACCEPT
			$IPT6 -A INPUT -i $ITER -p tcp --dport $PORT -j ACCEPT
		done
		for PORT in "${WWopenPortUDP[@]}"; do
			$IPT -A INPUT -i $ITER -p udp --dport $PORT -j ACCEPT
			$IPT6 -A INPUT -i $ITER -p udp --dport $PORT -j ACCEPT
		done

		$IPT -A INPUT -i $ITER -m geoip --src-cc $blockedCountry -j DROP
		$IPT -A INPUT -i $ITER -m geoip --src-cc $blockedCountry2 -j DROP
		$IPT6 -A INPUT -i $ITER -m geoip --src-cc $blockedCountry -j DROP
		$IPT6 -A INPUT -i $ITER -m geoip --src-cc $blockedCountry2 -j DROP

		for PORT in "${openPortTCP[@]}"; do
			$IPT -A INPUT -i $ITER -p tcp --dport $PORT -m geoip --src-cc $countryOpenPort -j ACCEPT
			$IPT -A INPUT -i $ITER -p tcp --dport $PORT -m geoip ! --src-cc $countryOpenPort -j DROP
			$IPT6 -A INPUT -i $ITER -p tcp --dport $PORT -m geoip --src-cc $countryOpenPort -j ACCEPT
			$IPT6 -A INPUT -i $ITER -p tcp --dport $PORT -m geoip ! --src-cc $countryOpenPort -j DROP
		done
		for PORT in "${openPortUDP[@]}"; do
			$IPT -A INPUT -i $ITER -p udp --dport $PORT -m geoip --src-cc $countryOpenPort -j ACCEPT
                        $IPT -A INPUT -i $ITER -p udp --dport $PORT -m geoip ! --src-cc $countryOpenPort -j DROP
			$IPT6 -A INPUT -i $ITER -p udp --dport $PORT -m geoip --src-cc $countryOpenPort -j ACCEPT
			$IPT6 -A INPUT -i $ITER -p udp --dport $PORT -m geoip ! --src-cc $countryOpenPort -j DROP
		done
	done

	echo "On accepte toute les requetes ICMP des pays souhaités"
	$IPT -A INPUT -p icmp -j ACCEPT #--src-cc $countryOpenPort
	$IPT6 -A INPUT -p ipv6-icmp -j ACCEPT #--src-cc $countryOpenPort

	echo "On ouvre les ports des containers docker"
	for PORT in "${openPortDockerTCP[@]}"; do
		$IPT -A "DOCKER" -p tcp --dport $PORT -j ACCEPT
		$IPT6 -A "DOCKER" -p tcp --dport $PORT -j ACCEPT 2> /dev/null
	done

	if (( ${#interfaceToGoOutSide[@]} )); then
		$IPT -t nat -A POSTROUTING -o $mainInter -j MASQUERADE
		$IPT6 -t nat -A POSTROUTING -o $mainInter -j MASQUERADE
	fi
	for INTER in "${interfaceToGoOutSide[@]}"; do
		$IPT -A INPUT -i $INTER -j $CHAINPORTSENTRYCLOSE
		$IPT6 -A INPUT -i $INTER -j $CHAINPORTSENTRYCLOSE
		$IPT -A FORWARD -i $INTER -o $mainInter -j ACCEPT
		$IPT -A FORWARD -i $mainInter -o $INTER -m state --state ESTABLISHED,RELATED -j ACCEPT
		$IPT6 -A FORWARD -i $INTER -o $mainInter -j ACCEPT
		$IPT6 -A FORWARD -i $mainInter -o $INTER -m state --state ESTABLISHED,RELATED -j ACCEPT

		$IPT -A INPUT -i $INTER -j ACCEPT
		$IPT6 -A INPUT -i $INTER -j ACCEPT
	done

	for INTER in "${interfaceToForwardToDocker[@]}"; do
		$IPT -A FORWARD -i docker0 -o $INTER -j ACCEPT
		$IPT -A FORWARD -i $INTER -o docker0 -j ACCEPT
		$IPT6 -A FORWARD -i docker0 -o $INTER -j ACCEPT
		$IPT6 -A FORWARD -i $INTER -o docker0 -j ACCEPT
	done

	echo "On drop tout le reste du traffic"
	#for INTER in "${INTEROut[@]}"; do
	#done
	$IPT -A INPUT -j DROP
	$IPT6 -A INPUT -j DROP

	# On remove les route deny. Ce qui evite des problèmes
	for IP in "${IPAutor[@]}"; do
		$ROUTE -n del $IP reject 2> /dev/null &
		$SED -i "/^ALL: ${IP} : DENY/d" "/etc/hosts.deny" &
		$SED -i "/${IP}/d" /etc/init.d/firewall.block.ip &
		#/usr/bin/fail2ban-client set ssh unbanip ${IP} 2> /dev/null &
		#/usr/bin/fail2ban-client set recidive unbanip ${IP} 2> /dev/null &
	done
	for IP in "${IPBlock[@]}"; do
		$ROUTE -n del $IP reject 2> /dev/null &
		$SED -i "/^ALL: ${IP} : DENY/d" "/etc/hosts.deny" &
		#/usr/bin/fail2ban-client set ssh unbanip ${IP} 2> /dev/null &
		#/usr/bin/fail2ban-client set recidive unbanip ${IP} 2> /dev/null &
	done
	wait

return 0
}

#
# Function that set the firewall rules
#
flush_rules()
{
	$IPT -F INPUT
	$IPT6 -F INPUT

	$IPT -F DOCKER 2> /dev/null
	$IPT6 -F DOCKER 2> /dev/null
	for INTER in "${interfaceToForwardToDocker[@]}"; do
		$IPT -D FORWARD -i docker0 -o $INTER -j ACCEPT 2> /dev/null
		$IPT -D FORWARD -i $INTER -o docker0 -j ACCEPT 2> /dev/null
		$IPT -D FORWARD -o $INTER -j REJECT --reject-with icmp-port-unreachable 2> /dev/null
		$IPT -D FORWARD -i $INTER -j REJECT --reject-with icmp-port-unreachable 2> /dev/null
		$IPT6 -D FORWARD -i docker0 -o $INTER -j ACCEPT 2> /dev/null
		$IPT6 -D FORWARD -i $INTER -o docker0 -j ACCEPT 2> /dev/null
	done
	for INTER in "${interfaceToGoOutSide[@]}"; do
		$IPT -D FORWARD -i $INTER -o $mainInter -j ACCEPT 2> /dev/null
		$IPT -D FORWARD -i $mainInter -o $INTER -m state --state ESTABLISHED,RELATED -j ACCEPT 2> /dev/null
		$IPT6 -D FORWARD -i $INTER -o $mainInter -j ACCEPT 2> /dev/null
		$IPT6 -D FORWARD -i $mainInter -o $INTER -m state --state ESTABLISHED,RELATED -j ACCEPT 2> /dev/null
	done

	$IPT -t nat -D POSTROUTING -o $mainInter -j MASQUERADE 2> /dev/null
	$IPT6 -t nat -D POSTROUTING -o $mainInter -j MASQUERADE 2> /dev/null

	#$IPT -F FORWARD
	$IPT -F OUTPUT
	$IPT6 -F OUTPUT

	for chain in "${SPECIALCHAINLIST[@]}"; do
		$IPT -F $chain 2> /dev/null
		$IPT6 -F $chain 2> /dev/null
		$IPT -X $chain 2> /dev/null
		$IPT6 -X $chain 2> /dev/null
	done

	return 0
}

command="$1"
case "$command" in
        start|force-start|restart|force-restart|reload|force-reload)
                set_rules
                ;;
        stop)
                flush_rules
                ;;

        status)
                $IPT -L INPUT -v -n
		$IPT -L FORWARD -v -n
		$IPT -L OUTPUT -v -n
                $IPT6 -L -v -n
                ;;
        *)
esac

#update-rc.d firewall defaults;

#! /bin/bash
### BEGIN INIT INFO
# Provides:          firewall
# Required-Start:    $all
# Required-Stop:     $local_fs $remote_fs
# Should-Stop:       $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start/stop firewall
# Description:       Start/stop firewall, a script to set/unset your custom fir
### END INIT INFO
 
IPT=/sbin/iptables
mainInter="eth0"
declare -a IPAutor=() # 
declare -a INTEROut=()
declare -a interfaceToGoOutSide=()
declare -a rulesZone=("INPUT" "DOCKER")
declare -a openPortTCP=()
declare -a openPortUDP=()
declare -a portSentryTCP=()
declare -a portSentryUDP=()
declare -a openPortDockerTCP=() # Permet l'ouverture du port des conteneur
declare -a openPortDockerTCPExt=() # Permet l'ouverture du port a l exterieur. -p 81:80 = 81 openPortDockerTCPExt et 80 openPortDockerTCP
declare -a interfaceToForwardToDocker=() # Permet de forward les cconnexion vers les container docker
#
# Function that set the firewall rules
#
set_rules()
{
	# On réinitialise le firewall
	flush_rules

	# On accepte toute les requetes ICMP
	$IPT -A INPUT -p icmp -j ACCEPT
	# On autorise les connexions dont l état est RELATED ou ESTABLISHED
	# L'ouverture complete se fait ici a utiliser avec precautions
	for ITER in "${INTEROut[@]}"; do
		for zone in "${rulesZone[@]}"; do
			# On autorise les connexions dont l état est RELATED ou ESTABLISHED
			$IPT -A $zone -i $ITER -m state --state ESTABLISHED,RELATED -j ACCEPT
			# On autorise nos IP
			for IP in "${IPAutor[@]}"; do
				$IPT -A $zone -i $ITER -s $IP -j ACCEPT
			done
		done

		# Partie special docker avec ouverture global des ports
		for PORT in "${openPortDockerTCP[@]}"; do
			$IPT -A "DOCKER" -i $ITER -p tcp --dport $PORT -j ACCEPT
		done
		for PORT in "${openPortDockerTCPExt[@]}"; do
			$IPT -A "INPUT" -i $ITER -p tcp --dport $PORT -j ACCEPT
		done

		# On ouvre les port pour portsentry et son ultimate ban
		for PORT in "${portSentryTCP[@]}"; do
			$IPT -A INPUT -i $ITER -p tcp --dport $PORT -j ACCEPT
		done
		for PORT in "${portSentryUDP[@]}"; do
			$IPT -A INPUT -i $ITER -p udp --dport $PORT -j ACCEPT
		done
		for PORT in "${openPortTCP[@]}"; do
			$IPT -A INPUT -i $ITER -p tcp --dport $PORT -j ACCEPT
		done
		for PORT in "${openPortUDP[@]}"; do
			$IPT -A INPUT -i $ITER -p udp --dport $PORT -j ACCEPT
		done
	done

	for zone in "${rulesZone[@]}"; do
		$IPT -A $zone -s 10.0.0.0/24 -j ACCEPT
	done

	iptables -t nat -A POSTROUTING -o $mainInter -j MASQUERADE
	for INTER in "${interfaceToGoOutSide[@]}"; do
		for PORT in "${openPortTCP[@]}"; do
			$IPT -A INPUT -i $INTER -p tcp --dport $PORT -j ACCEPT
		done
		for PORT in "${openPortUDP[@]}"; do
			$IPT -A INPUT -i $INTER -p udp --dport $PORT -j ACCEPT
		done
		for PORT in "${portSentryTCP[@]}"; do
			$IPT -A INPUT -i $INTER -p tcp --dport $PORT -j DROP
		done
		for PORT in "${portSentryUDP[@]}"; do
			$IPT -A INPUT -i $INTER -p udp --dport $PORT -j DROP
		done
		$IPT -A FORWARD -i $INTER -o $mainInter -j ACCEPT
		$IPT -A FORWARD -i $mainInter -o $INTER -m state --state ESTABLISHED,RELATED -j ACCEPT
	done

	for INTER in "${interfaceToForwardToDocker[@]}"; do
		$IPT -A FORWARD -i docker0 -o $INTER -j ACCEPT
		$IPT -A FORWARD -i $INTER -o docker0 -j ACCEPT
	done

	# On "drop" tout le reste du traffic
	for ITER in "${INTEROut[@]}"; do
		$IPT -A INPUT -i $ITER -j DROP
	done
	$IPT -A INPUT -i virbr1 -j DROP
return 0
}
 
#
# Function that set the firewall rules
#
flush_rules()
{
	$IPT -F INPUT
	$IPT -F DOCKER
	for INTER in "${interfaceToForwardToDocker[@]}"; do
		$IPT -D FORWARD -i docker0 -o $INTER -j ACCEPT
		$IPT -D FORWARD -i $INTER -o docker0 -j ACCEPT
		$IPT -D FORWARD -o $INTER -j REJECT --reject-with icmp-port-unreachable
		$IPT -D FORWARD -i $INTER -j REJECT --reject-with icmp-port-unreachable
	done
	#$IPT -F FORWARD
	$IPT -F OUTPUT
	return 0
}
 
command="$1"
case "$command" in
        start|force-start|restart|force-restart|reload|force-reload)
                set_rules
                ;;
        stop)
                flush_rules             
                ;;
 
        status)
                $IPT -L
                ;;
        *)
esac

#update-rc.d firewall defaults;
